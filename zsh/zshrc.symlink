export ZSH=$HOME/.dotfiles/zsh

# Cross compiling stuff from binutils
export PATH="/usr/local/opt/llvm/bin:/usr/local/opt/cross/bin:/usr/local/bin:/usr/local/opt:$PATH"

ZSH_THEME="spaceship"
#DEFAULT_USER=Ryan

plugins=(git aliases osx tmux zsh-autosuggestions docker zsh-syntax-highlighting virtualenv)

source $ZSH/oh-my-zsh.sh
source $ZSH/config/fix.sh
source /usr/share/z/z.sh

alias ws='cd ~/workspace'
alias refresh='.. && -'
alias c='clear'
alias sha1='openssl sha1 '

# CS Department Remote Machine
alias rlmount='sshfs rliang@best-linux.cs.wisc.edu:/u/r/l/rliang/private ~/workspace/mnt/rliang/private'
alias rlumount='umount ~/workspace/mnt/rliang/private'
alias rlprivate='cd ~/workspace/mnt/rliang/private'
alias cpprivate='echo "/Users/ryan/workspace/mnt/rliang/private" | pbcopy'

# filtered fzf
fzfiltered() {
	find . build -not \( -path Library -prune \) \
                 -not \( -path System -prune \)  \
                 -not \( -path Movie -prune \)   \
                 -not \( -path Documents -prune \)  \
                 -not \( -path Pictures -prune \)   \
                 -not \( -name 'node_modules' -prune \)  \
                 -not \( -name 'Applications'  -prune \)  \
                 -not \( -name 'plugged' -prune \)  \
                 -maxdepth 5 -type f | fzf
}

# filtered vim
vimf(){
	local  result=$(fzfiltered)
	if [[ "$result" ]]; then
		vim $result
	fi
}

loadnvm(){
    export NVM_DIR="$HOME/.nvm"
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
    [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
}

# eval "$(rbenv init -)"


# Load pyenv
#eval "$(pyenv init -)"

# virtualenvwrapper
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/workspace/
# pyenv virtualenvwrapper_lazy
# source /Users/ryan/.pyenv/shims/virtualenvwrapper.sh

# github.com/jiansoung/issues-list/issues/13
## For compilers to find zlib you may need to set:
# export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
# export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"

# # For pkg-config to find zlib you may need to set:
# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
